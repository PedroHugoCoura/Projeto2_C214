name: Run PHPUnit Tests

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  install-dependencies:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, xml, xdebug
          coverage: xdebug

      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install Composer
        run: curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer

      - name: Install dependencies
        run: composer install --prefer-dist

      - name: Upload vendor folder
        uses: actions/upload-artifact@v4
        with:
          name: vendor-folder
          path: vendor

  phpunit-tests:
    runs-on: ubuntu-latest
    needs: install-dependencies
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, xml, xdebug
          coverage: xdebug

      - name: Check PHP Version
        run: php --version

      - name: Download vendor folder
        uses: actions/download-artifact@v4
        with:
          name: vendor-folder

      - name: Verify vendor folder
        run: ls -la vendor

      - name: Run PHPUnit Tests
        run: |
          mkdir -p reports
          php vendor/bin/phpunit --log-junit reports/report.xml tests/IMCtest.php

      - name: Publish test results
        uses: actions/upload-artifact@v4
        with:
          name: junit-report
          path: reports/report.xml

      - name: Verify tests passed
        run: |
          if grep -q '<failure' reports/report.xml; then
            echo "Tests failed!"
            exit 1
          else
            echo "Tests passed successfully!ðŸ˜‰"
          fi

  package-project:
    runs-on: ubuntu-latest
    needs: phpunit-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download vendor folder
        uses: actions/download-artifact@v4
        with:
          name: vendor-folder

      - name: Package Project
        run: |
          mkdir build
          rsync -av --exclude='build' --exclude='.git' --exclude='.github' ./ build/
          cd build
          rm -rf tests .git .github
          zip -r ../php-project.zip .
          cd ..
